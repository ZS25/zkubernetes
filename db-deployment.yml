apiVersion: v1
kind: PersistentVolumeClaim # We define the storage for MySQL, dynamically provisioned by Kubernetes cluster
metadata:
  name: mysql-pv-claim # for identifying the storage data
  labels:
    app: mysql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi    #This will tell kubernetes about the amount of space we are requesting (claiming).
---
apiVersion: apps/v1
kind: Deployment # We configure the deployment of the MySQL server
metadata:
  name: mysql
  labels:
    app: mysql
    tier: database
spec:
  selector: # MySQL pod labels
    matchLabels:
      app: mysql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: mysql
        tier: database
    spec:
      containers:
        - image: mysql:8.3 # image from docker-hub
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom :
                secretKeyRef :
                  name : mysql-secrets
                  key :  password

            - name: MYSQL_DATABASE # Setting Database Name from a 'ConfigMap'
              valueFrom :
                configMapKeyRef :
                  name : db-config
                  key :  dbName

          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:        # Mounting voulume obtained from above Persistent Volume Claim
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql #This is the path in the container on which the mounting will take place.
      volumes:
        - name: mysql-persistent-storage # Obtaining volume from PVC
          persistentVolumeClaim:
            claimName: mysql-pv-claim